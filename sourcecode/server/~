#include "masterheaders.h"

void* inotify(void * f1)
{
				int length, i = 0;
				int fd;
				int wd;
				char buffer[BUF_LEN];

				fd = inotify_init();
				if ( fd < 0 ) {
								perror( "inotify_init" );
								printf( "ERROR" );
				}

			  logger("INFO","SERVER","Adding a watch for file");	
				wd = inotify_add_watch( fd, FILENAME ,IN_MODIFY ); // Blocking call

				while ( 1 )
				{
			  				logger("INFO","SERVER","infite while loop");	
								length = read( fd, buffer, 1024 );

								if ( length < 0 ) {
												perror( "read" );
								}

								while ( i < length )
								{
												struct inotify_event *event = ( struct inotify_event * ) &buffer[ i ];

												if ( event->mask & 2 ) 
												{

																if ( event->mask & IN_ISDIR ) {
																				printf( "The directory %s was modified.\n", event->name );
																}
																else {
																				printf( "The file %s was modified.\n", event->name );
																}
												}
												i += EVENT_SIZE + event->len;
								}
				}

				( void ) inotify_rm_watch( fd, wd );
				( void ) close( fd );
				return NULL;
}

void init_inotify()
{
			  logger("INFO","SERVER","Staring the thread for inotify");	
				pthread_t inotify_thread;
				pthread_create(&inotify_thread , NULL , inotify , &inotify_thread);
}
